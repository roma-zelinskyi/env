#
# Roman Zelinskyi cpp snippets
#

snippet guard "Include header guard" A
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif // $1
endsnippet

snippet io "#include <iostream>" A
#include <iostream>
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet class "class {};" b
class $1
{
public:
	$1();
	$2

private:
	$3
};
endsnippet

snippet interface "class {...};" b
class $1
{
protected:
	$1() = default;

	$1(const $1&) = default;
	$1& operator=(const $1&) = default;

	$1($1&&) = default;
	$1& operator=($1&&) = default;

public:
	virtual ~$1() = default;

	$2
};
endsnippet

snippet nocopy "A(const A&) = delete" A
$1(const $1&) = delete;
$1& operator=(const $1&) = delete;
endsnippet

snippet nomove "A(A&&) = delete" A
$1($1&&) = delete;
$1& operator=($1&&) = delete;
endsnippet

snippet defcopy "A(A&&) = default" A
$1(const $1&) = default;
$1& operator=(const $1&) = default;
endsnippet

snippet defmove "A(A&&) = default" A
$1($1&&) = default;
$1& operator=($1&&) = default;
endsnippet

snippet main "main(...)" A
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet out "std::cout <<" b
std::cout << $1 << '\n';
endsnippet

snippet in "std::cin <<" b
std::cin << $1 << '\n';
endsnippet
